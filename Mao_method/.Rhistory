w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_nonover[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_nonover[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_nonover[i]=MMD(t_x1,t_x0)
}
# plot(density(x1))
# lines(density(x0))
plot(-entropy_distance_over,type='l',col="red")
lines(-entropy_distance_nonover,type='l',col="blue")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
plot(wass_distance_over,type='l',col="red")
lines(wass_distance_nonover,type='l',col="blue")
entropy_distance_over
entropy_distance_nonover
diff_mean=seq(1,2,length=10)
overlapp=0
for (i in 1:10){
x1=rnorm(n_sample)
x0=rnorm(n_sample,diff_mean[i])
t_x1=x1[x1>0&x1<diff_mean[i]]
t_x0=x0[x0>0&x0<diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_over[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_over[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_over[i]=MMD(t_x1,t_x0)
x1=rnorm(n_sample)
x0=rnorm(n_sample,0.2*diff_mean[i])
t_x1=x1[x1>-diff_mean[i]&x1<3*diff_mean[i]]
t_x0=x0[x0>-diff_mean[i]&x0<3*diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_nonover[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_nonover[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_nonover[i]=MMD(t_x1,t_x0)
}
# plot(density(x1))
# lines(density(x0))
plot(-entropy_distance_over,type='l',col="red")
lines(-entropy_distance_nonover,type='l',col="blue")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
plot(wass_distance_over,type='l',col="red")
lines(wass_distance_nonover,type='l',col="blue")
library(transport)
library(EasyMMD)
n_sample=500
entropy_distance_over<-numeric(10)
wass_distance_over<-numeric(10)
mmd_distance_over<-numeric(10)
entropy_distance_nonover<-numeric(10)
wass_distance_nonover<-numeric(10)
mmd_distance_nonover<-numeric(10)
diff_mean=seq(1,2,length=10)
overlapp=0
for (i in 1:10){
x1=rnorm(n_sample)
x0=rnorm(n_sample,diff_mean[i])
t_x1=x1[x1>0&x1<diff_mean[i]]
t_x0=x0[x0>0&x0<diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_over[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_over[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_over[i]=MMD(t_x1,t_x0)
x1=rnorm(n_sample)
x0=rnorm(n_sample,0.2*diff_mean[i])
t_x1=x1[x1>-diff_mean[i]&x1<3*diff_mean[i]]
t_x0=x0[x0>-diff_mean[i]&x0<3*diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_nonover[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_nonover[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_nonover[i]=MMD(t_x1,t_x0)
}
# plot(density(x1))
# lines(density(x0))
plot(-entropy_distance_nonover,type='l',col="red")
lines(-entropy_distance_over,type='l',col="blue")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
plot(wass_distance_over,type='l',col="red")
lines(wass_distance_nonover,type='l',col="blue")
plot(-entropy_distance_nonover,type='l',ylim=c(0,15),col="blue")
lines(-entropy_distance_over,type='l',col="blue")
plot(-entropy_distance_nonover,type='l',ylim=c(9,13),col="blue")
lines(-entropy_distance_over,type='l',col="red")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
plot(wass_distance_over,type='l',col="red")
lines(wass_distance_nonover,type='l',col="blue")
library(transport)
library(EasyMMD)
n_sample=500
entropy_distance_over<-numeric(10)
wass_distance_over<-numeric(10)
mmd_distance_over<-numeric(10)
entropy_distance_nonover<-numeric(10)
wass_distance_nonover<-numeric(10)
mmd_distance_nonover<-numeric(10)
diff_mean=seq(1,2,length=10)
overlapp=0
for (i in 1:10){
temp_1=numeric(100)
temp_2=numeric(100)
temp_3=numeric(100)
for(trial in 1:100){
x1=rnorm(n_sample)
x0=rnorm(n_sample,diff_mean[i])
t_x1=x1[x1>0&x1<diff_mean[i]]
t_x0=x0[x0>0&x0<diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
temp_1=sum(w_0*log(w_0))+sum(w_1*log(w_1))
temp_2=wasserstein1d(t_x1,t_x0)
temp_3=MMD(t_x1,t_x0)
}
entropy_distance_over[i]=mean(temp_1)
wass_distance_over[i]=mean(temp_2)
mmd_distance_over[i]=mean(temp_3)
temp_1=numeric(100)
temp_2=numeric(100)
temp_3=numeric(100)
for(trial in 1:100){
x1=rnorm(n_sample)
x0=rnorm(n_sample,0.2*diff_mean[i])
t_x1=x1[x1>-diff_mean[i]&x1<3*diff_mean[i]]
t_x0=x0[x0>-diff_mean[i]&x0<3*diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
temp_1=sum(w_0*log(w_0))+sum(w_1*log(w_1))
temp_2=wasserstein1d(t_x1,t_x0)
temp_3=MMD(t_x1,t_x0)
}
entropy_distance_nonover[i]=mean(temp_1)
wass_distance_nonover[i]=mean(temp_2)
mmd_distance_nonover[i]=mean(temp_3)
}
plot(-entropy_distance_nonover,type='l',ylim=c(9,13),col="blue")
lines(-entropy_distance_over,type='l',col="red")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
plot(wass_distance_over,type='l',col="red")
lines(wass_distance_nonover,type='l',col="blue")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
seq(1,2,length=10)
library(EasyMMD)
n_sample=500
entropy_distance_over<-numeric(10)
wass_distance_over<-numeric(10)
mmd_distance_over<-numeric(10)
entropy_distance_nonover<-numeric(10)
wass_distance_nonover<-numeric(10)
mmd_distance_nonover<-numeric(10)
diff_mean=seq(1,3,length=10)
overlapp=0
for (i in 1:10){
temp_1=numeric(100)
temp_2=numeric(100)
temp_3=numeric(100)
for(trial in 1:100){
x1=rnorm(n_sample)
x0=rnorm(n_sample,diff_mean[i])
t_x1=x1[x1>0&x1<diff_mean[i]]
t_x0=x0[x0>0&x0<diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
temp_1=sum(w_0*log(w_0))+sum(w_1*log(w_1))
temp_2=wasserstein1d(t_x1,t_x0)
temp_3=MMD(t_x1,t_x0)
}
entropy_distance_over[i]=mean(temp_1)
wass_distance_over[i]=mean(temp_2)
mmd_distance_over[i]=mean(temp_3)
temp_1=numeric(100)
temp_2=numeric(100)
temp_3=numeric(100)
for(trial in 1:100){
x1=rnorm(n_sample)
x0=rnorm(n_sample,0.2*diff_mean[i])
t_x1=x1[x1>-diff_mean[i]&x1<3*diff_mean[i]]
t_x0=x0[x0>-diff_mean[i]&x0<3*diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
temp_1=sum(w_0*log(w_0))+sum(w_1*log(w_1))
temp_2=wasserstein1d(t_x1,t_x0)
temp_3=MMD(t_x1,t_x0)
}
entropy_distance_nonover[i]=mean(temp_1)
wass_distance_nonover[i]=mean(temp_2)
mmd_distance_nonover[i]=mean(temp_3)
}
# plot(density(x1))
# lines(density(x0))
plot(-entropy_distance_nonover,type='l',ylim=c(9,13),col="blue")
lines(-entropy_distance_over,type='l',col="red")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
plot(wass_distance_over,type='l',col="red")
lines(wass_distance_nonover,type='l',col="blue")
plot_size=2.5
n_index=1:16
pchisq(2,1)
pchisq(1,2)
pchisq(1,4)
df2 = data.frame(Y1 = c(35,45,55,65,25,45,60,75,35,55,35,65),
Y0 = c(40,55,55,70,30,55,65,80,40,50,40,70))
cb_12_4 = combn(12,4)
cb_4_2 = combn(4,2)
y_diff = c()
for (i in c(1:495)) {
samp = df2[cb_12_4[,i],]
for (j in c(1:6)) {
y_diff = c(y_diff, mean(samp[cb_4_2[,j],1])-mean(samp[-cb_4_2[,j],2]))
}
}
var(y_diff)*(length(y_diff)-1)/length(y_diff)
cb_4_2[,j]
(Y1-t_sp)
t_sp=mean(df2$Y1-df2$Y0)
y=df2$Y1-df2$Y0-t_sp
y
y%t(y)
y%*%t(y)
sum(y%*%t(y))-diag(y%*%t(y))
sum(y%*%t(y))-sum(diag(y%*%t(y)))
t_sp
y
crossprod(y,y)
y%*%t(y)
y%*%t(y)-diag(y%*%t(y))
sum(y%*%t(y)-diag(y%*%t(y)))
y
sum(y%*%t(y))
y^2
y%*%t(y)
sum(y%*%t(y))
mean(df2$Y1-df2$Y0)
y%*%t(y)
sum(y%*%t(y))-sum(y^2)
A=array(0,dim=c(200,10,10,10))
A[][i][8][9]
A
a[,1,1,1]
A[,1,1,1]
A=array(0,dim=c(200,10,10,10))
for (i in 1:10)
{
A[,i,8,9]=rnorm(200)
}
for (i in 1:10)
{
A[,i,8,9]=rnorm(200)
}
A=array(0,dim=c(200,100,10,10))
for (i in 1:100)
{
A[,i,8,9]=rnorm(200)
}
A=array(0,dim=c(200,100,10,10))
running_time=rep(0,100)
for (i in 1:100)
{
start_time <- Sys.time()
A[,i,8,9]=rnorm(200)
end_time <- Sys.time()
running_time[i]=start_time-end_time
}
running_time
perms_pairs <- t(allPerm(initMC(c(-1, -1, -1, 1, 1, 1))))
n_perms_pairs <- ncol(perms_pairs)
library(multicool)
devtools::install_github("stan-dev/rstanarm", build_vignettes = FALSE)
devtools::install_github("stan-dev/rstanarm", build_vignettes = FALSE)
install.packages("rstanarm")
install.packages("rstanarm")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
devtools::install_github("stan-dev/rstanarm", build_vignettes = FALSE)
remove.packages("glue")
installed.packages("glue")
devtools::install_github("stan-dev/rstanarm", build_vignettes = FALSE)
remove.packages("glue")
devtools::install_github("stan-dev/rstanarm", build_vignettes = FALSE)
devtools::install_github("stan-dev/rstanarm", build_vignettes = FALSE)
setwd("C:/Users/Shuxi ZENG/Dropbox/Fourth Year/OW_Survival/codebase")
rm( list=ls( all = T ) );
date.tag <- "2018_05_25_";
set.seed(123);
setwd("C:\Users\Shuxi ZENG\Dropbox\Fourth Year\OW_Survival\codebase\Mao_method")
setwd("C:\users\Shuxi ZENG\Dropbox\Fourth Year\OW_Survival\codebase\Mao_method")
setwd("C:/Users/Shuxi ZENG/Dropbox/Fourth Year/OW_Survival/codebase/Mao_method")
library( survival );
source( "functions//func_PS_Estimand_analysis.R" );
source( "functions//GIPW_function_omega.R" );
source( "functions//func_PS_Estimand_analysis.R" );
source( "functions//GIPW_function_omega.R" );
n.sample <- 500;
PID <- c( 1 : n.sample );
X0 <- rep( 1, n.sample );
X1 <- rnorm( n.sample, 0, 1 );
X2 <- rnorm( n.sample, 1, 2 );
X3 <- rbinom( n.sample, 1, 0.5 );
X4 <- rbinom( n.sample, 1, 0.3 );
X.sum <- X1 + X2 + X3 + X4;
Z <- rbinom( n.sample, 1, exp( X.sum )/( 1 + exp(X.sum) ) );
Y <- rexp( n.sample, 0.2 );
censor.time <- runif( n.sample, 0, 0.5*max(Y) );
delta <- as.numeric( Y <= censor.time ); # event indicator
X4PS <- c( "X1", "X2", "X3", "X4" );
data <- as.data.frame( cbind( PID, X0, X1, X2, X3, X4, Z, Y, delta ) );
write.csv( data, "Example_data.csv" );
setup <- list( nsample = 0,
sp.degree = 1,
nknots = 10,
trt.type = ' ',
weight.type = ' ',
overlap = ' ',
data.type = ' ',
race.time = 4,
spce.time = 4,
sqe.quantile = 0.5 );
IDname <- "PID";
prefix.knots <- "lambda";
prefix.fix <- "time";
knots.name <- paste(set.basis.name(nbasis=setup$nknots, prefix=prefix.knots), sep=',');
var.name <- c( "X0", t( sapply( c(1:setup$sp.degree), function(x) paste( prefix.fix, x, sep='') ) ), knots.name);
out.name <- "Yig";
x.name <- c( "X0", X4PS );
offset.name <- "Cig";
wt.name <- "wt";
censor.name <- "delta";
tname <- "Z";
time.name <- "Y";
alpha1.name <- sapply( 1 : (setup$nknots+setup$sp.degree+1), function(x) paste( "alpha1.", x, sep='') );
alpha0.name <- sapply( 1 : (setup$nknots+setup$sp.degree+1), function(x) paste( "alpha0.", x, sep='') );
beta.name <- sapply( c( 0 : (length(x.name)-1) ) , function(x) paste( "beta", x, sep='') );
ps.form <- as.formula( paste( "Z ~ ", paste( X4PS, collapse = " + " ), sep="" ) );
surv.form <- as.formula( 'Surv(Y, delta) ~ Z' );
D0 <- D1 <- cbind(matrix(0, ncol=(setup$sp.degree+1), nrow=setup$nknots), diag(setup$nknots));
par.start <- rep(0, length = (setup$sp.degree+setup$nknots+1) );
write.poisson.data <- function( data, weight.type ) {
# poissonization for to calculate pentalty parameter (sigma)
#   data: data to be used
#   weight.type: PS weighting method
out.ps <- ps.model(dat=data, form=ps.form );
data$ps <- out.ps$ps.hat;  # estimated ps
omega <- sapply( data$ps, calc.omega, weight = weight.type );
data$wt <- omega / ( data$ps * data$Z + (1-data$ps) * (1-data$Z) );
# treated group
Z <- 1;
tmp <- cox.to.poisson( dat=data[ data$Z==Z, ], nknots=setup$nknots, dgr=setup$sp.degree, basis.name=var.name, out.name=out.name,
offset.name=offset.name, tname=tname, censor.name=censor.name, wt.name=wt.name, ID.name=IDname, time.name=time.name );
write.csv( tmp$dat.poisson, paste( "poisson_data//data_poisson_estimand",weight.type, "_", ifelse(Z==1, "treated", "control"), ".csv", sep="" ), row.names = F );
# control group
Z <- 0;
tmp <- cox.to.poisson( dat=data[ data$Z==Z, ], nknots=setup$nknots, dgr=setup$sp.degree, basis.name=var.name, out.name=out.name,
offset.name=offset.name, tname=tname, censor.name=censor.name, wt.name=wt.name, ID.name=IDname, time.name=time.name );
write.csv( tmp$dat.poisson, paste( "poisson_data//data_poisson_estimand",weight.type, "_", ifelse(Z==1, "treated", "control"), ".csv", sep="" ), row.names = F );
}
write.poisson.data( data = data, weight.type="IPW" );
dir.create(file.path("C:/Users/Shuxi ZENG/Dropbox/Fourth Year/OW_Survival/codebase/Mao_method", "poisson_data"), showWarnings = FALSE)
write.poisson.data <- function( data, weight.type ) {
# poissonization for to calculate pentalty parameter (sigma)
#   data: data to be used
#   weight.type: PS weighting method
dir.create(file.path("C:/Users/Shuxi ZENG/Dropbox/Fourth Year/OW_Survival/codebase/Mao_method", "poisson_data"), showWarnings = FALSE)
out.ps <- ps.model(dat=data, form=ps.form );
data$ps <- out.ps$ps.hat;  # estimated ps
omega <- sapply( data$ps, calc.omega, weight = weight.type );
data$wt <- omega / ( data$ps * data$Z + (1-data$ps) * (1-data$Z) );
# treated group
Z <- 1;
tmp <- cox.to.poisson( dat=data[ data$Z==Z, ], nknots=setup$nknots, dgr=setup$sp.degree, basis.name=var.name, out.name=out.name,
offset.name=offset.name, tname=tname, censor.name=censor.name, wt.name=wt.name, ID.name=IDname, time.name=time.name );
write.csv( tmp$dat.poisson, paste( "poisson_data//data_poisson_estimand",weight.type, "_", ifelse(Z==1, "treated", "control"), ".csv", sep="" ), row.names = F );
# control group
Z <- 0;
tmp <- cox.to.poisson( dat=data[ data$Z==Z, ], nknots=setup$nknots, dgr=setup$sp.degree, basis.name=var.name, out.name=out.name,
offset.name=offset.name, tname=tname, censor.name=censor.name, wt.name=wt.name, ID.name=IDname, time.name=time.name );
write.csv( tmp$dat.poisson, paste( "poisson_data//data_poisson_estimand",weight.type, "_", ifelse(Z==1, "treated", "control"), ".csv", sep="" ), row.names = F );
}
write.poisson.data( data = data, weight.type="IPW" );
# MW
write.poisson.data( data = data, weight.type="MW" );
# OW
write.poisson.data( data = data, weight.type="OVERLAP" );
estimand.analysis.fun <- function( data, data.setup ) {
# function for PS_Estimand analysis
#
# data: data to used
# data.setup: analysis setup up
out.ps <- ps.model(dat=data, form=ps.form );
beta.hat <- coef( out.ps$fm );
names( beta.hat ) <- beta.name;
data$ps <- out.ps$ps.hat;  # estimated ps
omega <- sapply( data$ps, calc.omega, weight=data.setup$weight.type ) / 2;
data$wt <- omega / ( data$ps * data$Z + (1-data$ps) * (1-data$Z) );
## Treated group
Z <- 1;
data.treat <- data[ data$Z == Z, ];
res1 <- calc.par( dat=data.treat, par.start=par.start, sigma=sigma1, nknots=data.setup$nknots, Dmat=D1, censor.name=censor.name, dgr=data.setup$sp.degree,
weight=data.setup$weight.type, out.name=out.name, offset.name=offset.name, wt.name=wt.name, basis.name=var.name, tname=tname,
ID.name=IDname, time.name=time.name );
pois.treat <- res1$pois.dat;
alpha1 <- res1$alpha;
names( alpha1 ) <- alpha1.name;
alpha1.var <- res1$alpha.var;
knots1 <- res1$knots;
## Control group
Z <- 0;
data.control <- data[ data$Z == Z, ];
res0 <- calc.par( dat=data.control, par.start=par.start, sigma=sigma0, nknots=data.setup$nknots, Dmat=D0, censor.name=censor.name, dgr=data.setup$sp.degree,
weight=data.setup$weight.type, out.name=out.name, offset.name=offset.name, wt.name=wt.name, basis.name=var.name, tname=tname,
ID.name=IDname, time.name=time.name );
pois.control <- res0$pois.dat;
alpha0 <- res0$alpha;
names( alpha0 ) <- alpha0.name;
alpha0.var <- res0$alpha.var;
knots0 <- res0$knots;
## combine data after poissonization
data.poisson <- rbind( pois.treat, pois.control );
colnames( data.poisson );
## Q matrix
Q <- matrix( 0, nrow=2*(data.setup$sp.degree + data.setup$nknots + 1) + length(x.name),
ncol=2*(data.setup$sp.degree + data.setup$nknots + 1) + length(x.name) );
diag(Q) <- c( rep(0, data.setup$sp.degree+1), rep(1/sigma1^2, data.setup$nknots), rep(0, data.setup$sp.degree+1),
rep(1/sigma0^2, data.setup$nknots), rep(0, length(x.name) ) );
param.hat <- c( alpha1, alpha0, beta.hat );
est.var <- calc.var(param=param.hat, dat=data, dat.pois=data.poisson, coef1.name=alpha1.name, coef0.name=alpha0.name,
beta.name=beta.name, out.name=out.name, xname=x.name, basis.name=var.name, tname=tname,
offset.name=offset.name, Qmat=Q, weight=data.setup$weight.type, ID.name=IDname );
est.var.alpha <- est.var[c(1 : (2*(data.setup$nknots+data.setup$sp.degree+1))), c(1 : (2*(data.setup$nknots+data.setup$sp.degree+1)))];  #covariance matrix for spline curves
zero.matrix <- matrix( 0, ncol=ncol(alpha1.var), nrow=nrow(alpha1.var) );
est.var.alpha.noPS <- rbind( cbind(alpha1.var, zero.matrix),  cbind(zero.matrix, alpha0.var) );
##################### weighting method ########################
#### RACE
tmp.race <- calc.race( tstar1 = data.setup$race.time, tstar0 = data.setup$race.time, var.alpha=est.var.alpha, var.alpha.noPS=est.var.alpha.noPS,
alpha1=alpha1, alpha0=alpha0, knots1=knots1, knots0=knots0, dgr=data.setup$sp.degree );
#print(tmp.race);
#### SPCE
tmp.spce <- calc.spce( select.time = data.setup$spce.time, var.alpha=est.var.alpha, var.alpha.noPS=est.var.alpha.noPS,
alpha1=alpha1, alpha0=alpha0, knots1=knots1, knots0=knots0, dgr=data.setup$sp.degree );
#print(tmp.spce);
#### SQE
tmp.sqe <- calc.sqe( q = data.setup$sqe.quantile, var.alpha=est.var.alpha, var.alpha.noPS=est.var.alpha.noPS,
alpha1=alpha1, alpha0=alpha0, knots1=knots1, knots0=knots0, dgr=data.setup$sp.degree );
#print( tmp.sqe );
ans <- rbind( tmp.race, tmp.spce, tmp.sqe );
ans <- cbind( data.frame( estimand = c( "RACE", "SPCE", "SQE" ) ), ans );
return( list( ans=ans, alpha1=alpha1, alpha0=alpha0, knots1=knots1, knots0=knots0 ) );
}
setup$weight.type <- "IPW";
sigma0 <- 0.2;
sigma1 <- 0.2;
res.estimand.IPW <- estimand.analysis.fun( data = data, data.setup = setup );
setup$weight.type <- "MW";
sigma0 <- 0.2
sigma1 <- 0.2
res.estimand.MW <- estimand.analysis.fun( data = data, data.setup = setup );
setup$weight.type <- "OVERLAP";
sigma0 <- 0.2;
sigma1 <- 0.2
res.estimand.OW <- estimand.analysis.fun( data = data, data.setup = setup );
##### Fitted survival estimation after PS weighting adjustment #####
time0 <- sort( data$Y[ (data$Z == 0) & (data$delta == 1) ] );
time1 <- sort( data$Y[ (data$Z == 1) & (data$delta == 1) ] );
surv1.IPW <- sapply( time1, calc.est.surv, knots=res.estimand.IPW$knots1, alpha=res.estimand.IPW$alpha1, dgr=setup$sp.degree );
surv0.IPW <- sapply( time0, calc.est.surv, knots=res.estimand.IPW$knots0, alpha=res.estimand.IPW$alpha0, dgr=setup$sp.degree );
surv1.MW <- sapply( time1, calc.est.surv, knots=res.estimand.MW$knots1, alpha=res.estimand.MW$alpha1, dgr=setup$sp.degree );
surv0.MW <- sapply( time0, calc.est.surv, knots=res.estimand.MW$knots0, alpha=res.estimand.MW$alpha0, dgr=setup$sp.degree );
surv1.OW <- sapply( time1, calc.est.surv, knots=res.estimand.OW$knots1, alpha=res.estimand.OW$alpha1, dgr=setup$sp.degree );
surv0.OW <- sapply( time0, calc.est.surv, knots=res.estimand.OW$knots0, alpha=res.estimand.OW$alpha0, dgr=setup$sp.degree )
surv1.OW
surv1.OW
plot(surv1.OW)
lines(surv0.OW)
PLOT(surv1.IPW)
plot(surv1.IPW)
lines(surv0.IPW)
time0
res.estimand.IPW
