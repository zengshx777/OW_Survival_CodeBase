diff_mean=seq(1,3,length=10)
overlapp=0
for (i in 1:10){
x1=rnorm(n_sample)
x0=rnorm(n_sample,diff_mean[i])
t_x1=x1[x1>0&x1<diff_mean[i]]
t_x0=x0[x0>0&x0<diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_over[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_over[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_over[i]=MMD(t_x1,t_x0)
t_x1=x1[x1>-diff_mean[i]&x1<3*diff_mean[i]]
t_x0=x0[x0>-diff_mean[i]&x0<3*diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_nonover[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_nonover[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_nonover[i]=MMD(t_x1,t_x0)
}
library(transport)
library(EasyMMD)
n_sample=500
entropy_distance_over<-numeric(10)
wass_distance_over<-numeric(10)
mmd_distance_over<-numeric(10)
entropy_distance_nonover<-numeric(10)
wass_distance_nonover<-numeric(10)
mmd_distance_nonover<-numeric(10)
diff_mean=seq(1,2,length=10)
overlapp=0
for (i in 1:10){
x1=rnorm(n_sample)
x0=rnorm(n_sample,diff_mean[i])
t_x1=x1[x1>0&x1<diff_mean[i]]
t_x0=x0[x0>0&x0<diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_over[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_over[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_over[i]=MMD(t_x1,t_x0)
t_x1=x1[x1>-diff_mean[i]&x1<3*diff_mean[i]]
t_x0=x0[x0>-diff_mean[i]&x0<3*diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_nonover[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_nonover[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_nonover[i]=MMD(t_x1,t_x0)
}
plot(-entropy_distance_over,type='l')
lines(-entropy_distance_nonover,type='l')
lines(-entropy_distance_nonover,type='l')
entropy_distance_nonover
entropy_distance_over
plot(-entropy_distance_over,type='l',col="red")
lines(-entropy_distance_nonover,type='l',col="blue")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
plot(-entropy_distance_over,type='l',col="red")
lines(-entropy_distance_nonover,type='l',col="blue")
plot(wass_distance_over,type='l',col="red")
lines(wass_distance_nonover,type='l',col="blue")
wass_distance_over
(wass_distance_nonover
)
library(transport)
library(EasyMMD)
n_sample=500
entropy_distance_over<-numeric(10)
wass_distance_over<-numeric(10)
mmd_distance_over<-numeric(10)
entropy_distance_nonover<-numeric(10)
wass_distance_nonover<-numeric(10)
mmd_distance_nonover<-numeric(10)
diff_mean=seq(1,2,length=10)
overlapp=0
for (i in 1:10){
x1=rnorm(n_sample)
x0=rnorm(n_sample,diff_mean[i])
t_x1=x1[x1>0&x1<diff_mean[i]]
t_x0=x0[x0>0&x0<diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_over[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_over[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_over[i]=MMD(t_x1,t_x0)
x1=rnorm(n_sample)
x0=rnorm(n_sample,0.5*diff_mean[i])
t_x1=x1[x1>-diff_mean[i]&x1<3*diff_mean[i]]
t_x0=x0[x0>-diff_mean[i]&x0<3*diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_nonover[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_nonover[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_nonover[i]=MMD(t_x1,t_x0)
}
# plot(density(x1))
# lines(density(x0))
plot(-entropy_distance_over,type='l',col="red")
lines(-entropy_distance_nonover,type='l',col="blue")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
plot(wass_distance_over,type='l',col="red")
lines(wass_distance_nonover,type='l',col="blue")
entropy_distance_over
entropy_distance_nonover
diff_mean=seq(1,2,length=10)
overlapp=0
for (i in 1:10){
x1=rnorm(n_sample)
x0=rnorm(n_sample,diff_mean[i])
t_x1=x1[x1>0&x1<diff_mean[i]]
t_x0=x0[x0>0&x0<diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_over[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_over[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_over[i]=MMD(t_x1,t_x0)
x1=rnorm(n_sample)
x0=rnorm(n_sample,0.2*diff_mean[i])
t_x1=x1[x1>-diff_mean[i]&x1<3*diff_mean[i]]
t_x0=x0[x0>-diff_mean[i]&x0<3*diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_nonover[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_nonover[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_nonover[i]=MMD(t_x1,t_x0)
}
# plot(density(x1))
# lines(density(x0))
plot(-entropy_distance_over,type='l',col="red")
lines(-entropy_distance_nonover,type='l',col="blue")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
plot(wass_distance_over,type='l',col="red")
lines(wass_distance_nonover,type='l',col="blue")
library(transport)
library(EasyMMD)
n_sample=500
entropy_distance_over<-numeric(10)
wass_distance_over<-numeric(10)
mmd_distance_over<-numeric(10)
entropy_distance_nonover<-numeric(10)
wass_distance_nonover<-numeric(10)
mmd_distance_nonover<-numeric(10)
diff_mean=seq(1,2,length=10)
overlapp=0
for (i in 1:10){
x1=rnorm(n_sample)
x0=rnorm(n_sample,diff_mean[i])
t_x1=x1[x1>0&x1<diff_mean[i]]
t_x0=x0[x0>0&x0<diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_over[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_over[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_over[i]=MMD(t_x1,t_x0)
x1=rnorm(n_sample)
x0=rnorm(n_sample,0.2*diff_mean[i])
t_x1=x1[x1>-diff_mean[i]&x1<3*diff_mean[i]]
t_x0=x0[x0>-diff_mean[i]&x0<3*diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
entropy_distance_nonover[i]=entropy=sum(w_0*log(w_0))+sum(w_1*log(w_1))
wass_distance_nonover[i]=wasserstein1d(t_x1,t_x0)
mmd_distance_nonover[i]=MMD(t_x1,t_x0)
}
# plot(density(x1))
# lines(density(x0))
plot(-entropy_distance_nonover,type='l',col="red")
lines(-entropy_distance_over,type='l',col="blue")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
plot(wass_distance_over,type='l',col="red")
lines(wass_distance_nonover,type='l',col="blue")
plot(-entropy_distance_nonover,type='l',ylim=c(0,15),col="blue")
lines(-entropy_distance_over,type='l',col="blue")
plot(-entropy_distance_nonover,type='l',ylim=c(9,13),col="blue")
lines(-entropy_distance_over,type='l',col="red")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
plot(wass_distance_over,type='l',col="red")
lines(wass_distance_nonover,type='l',col="blue")
library(transport)
library(EasyMMD)
n_sample=500
entropy_distance_over<-numeric(10)
wass_distance_over<-numeric(10)
mmd_distance_over<-numeric(10)
entropy_distance_nonover<-numeric(10)
wass_distance_nonover<-numeric(10)
mmd_distance_nonover<-numeric(10)
diff_mean=seq(1,2,length=10)
overlapp=0
for (i in 1:10){
temp_1=numeric(100)
temp_2=numeric(100)
temp_3=numeric(100)
for(trial in 1:100){
x1=rnorm(n_sample)
x0=rnorm(n_sample,diff_mean[i])
t_x1=x1[x1>0&x1<diff_mean[i]]
t_x0=x0[x0>0&x0<diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
temp_1=sum(w_0*log(w_0))+sum(w_1*log(w_1))
temp_2=wasserstein1d(t_x1,t_x0)
temp_3=MMD(t_x1,t_x0)
}
entropy_distance_over[i]=mean(temp_1)
wass_distance_over[i]=mean(temp_2)
mmd_distance_over[i]=mean(temp_3)
temp_1=numeric(100)
temp_2=numeric(100)
temp_3=numeric(100)
for(trial in 1:100){
x1=rnorm(n_sample)
x0=rnorm(n_sample,0.2*diff_mean[i])
t_x1=x1[x1>-diff_mean[i]&x1<3*diff_mean[i]]
t_x0=x0[x0>-diff_mean[i]&x0<3*diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
temp_1=sum(w_0*log(w_0))+sum(w_1*log(w_1))
temp_2=wasserstein1d(t_x1,t_x0)
temp_3=MMD(t_x1,t_x0)
}
entropy_distance_nonover[i]=mean(temp_1)
wass_distance_nonover[i]=mean(temp_2)
mmd_distance_nonover[i]=mean(temp_3)
}
plot(-entropy_distance_nonover,type='l',ylim=c(9,13),col="blue")
lines(-entropy_distance_over,type='l',col="red")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
plot(wass_distance_over,type='l',col="red")
lines(wass_distance_nonover,type='l',col="blue")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
seq(1,2,length=10)
library(EasyMMD)
n_sample=500
entropy_distance_over<-numeric(10)
wass_distance_over<-numeric(10)
mmd_distance_over<-numeric(10)
entropy_distance_nonover<-numeric(10)
wass_distance_nonover<-numeric(10)
mmd_distance_nonover<-numeric(10)
diff_mean=seq(1,3,length=10)
overlapp=0
for (i in 1:10){
temp_1=numeric(100)
temp_2=numeric(100)
temp_3=numeric(100)
for(trial in 1:100){
x1=rnorm(n_sample)
x0=rnorm(n_sample,diff_mean[i])
t_x1=x1[x1>0&x1<diff_mean[i]]
t_x0=x0[x0>0&x0<diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
temp_1=sum(w_0*log(w_0))+sum(w_1*log(w_1))
temp_2=wasserstein1d(t_x1,t_x0)
temp_3=MMD(t_x1,t_x0)
}
entropy_distance_over[i]=mean(temp_1)
wass_distance_over[i]=mean(temp_2)
mmd_distance_over[i]=mean(temp_3)
temp_1=numeric(100)
temp_2=numeric(100)
temp_3=numeric(100)
for(trial in 1:100){
x1=rnorm(n_sample)
x0=rnorm(n_sample,0.2*diff_mean[i])
t_x1=x1[x1>-diff_mean[i]&x1<3*diff_mean[i]]
t_x0=x0[x0>-diff_mean[i]&x0<3*diff_mean[i]]
Tr=c(rep(1,length(t_x1)),rep(0,length(t_x0)))
example_weights_0=ebalance(Treatment = Tr,X=c(t_x1,t_x0))
w_0=example_weights_0$w/sum(example_weights_0$w)
example_weights_1=ebalance(Treatment = 1-Tr,X=c(t_x1,t_x0))
w_1=example_weights_1$w/sum(example_weights_1$w)
temp_1=sum(w_0*log(w_0))+sum(w_1*log(w_1))
temp_2=wasserstein1d(t_x1,t_x0)
temp_3=MMD(t_x1,t_x0)
}
entropy_distance_nonover[i]=mean(temp_1)
wass_distance_nonover[i]=mean(temp_2)
mmd_distance_nonover[i]=mean(temp_3)
}
# plot(density(x1))
# lines(density(x0))
plot(-entropy_distance_nonover,type='l',ylim=c(9,13),col="blue")
lines(-entropy_distance_over,type='l',col="red")
plot(mmd_distance_over,type='l',col="red")
lines(mmd_distance_nonover,type='l',col="blue")
plot(wass_distance_over,type='l',col="red")
lines(wass_distance_nonover,type='l',col="blue")
plot_size=2.5
n_index=1:16
pchisq(2,1)
pchisq(1,2)
pchisq(1,4)
df2 = data.frame(Y1 = c(35,45,55,65,25,45,60,75,35,55,35,65),
Y0 = c(40,55,55,70,30,55,65,80,40,50,40,70))
cb_12_4 = combn(12,4)
cb_4_2 = combn(4,2)
y_diff = c()
for (i in c(1:495)) {
samp = df2[cb_12_4[,i],]
for (j in c(1:6)) {
y_diff = c(y_diff, mean(samp[cb_4_2[,j],1])-mean(samp[-cb_4_2[,j],2]))
}
}
var(y_diff)*(length(y_diff)-1)/length(y_diff)
cb_4_2[,j]
(Y1-t_sp)
t_sp=mean(df2$Y1-df2$Y0)
y=df2$Y1-df2$Y0-t_sp
y
y%t(y)
y%*%t(y)
sum(y%*%t(y))-diag(y%*%t(y))
sum(y%*%t(y))-sum(diag(y%*%t(y)))
t_sp
y
crossprod(y,y)
y%*%t(y)
y%*%t(y)-diag(y%*%t(y))
sum(y%*%t(y)-diag(y%*%t(y)))
y
sum(y%*%t(y))
y^2
y%*%t(y)
sum(y%*%t(y))
mean(df2$Y1-df2$Y0)
y%*%t(y)
sum(y%*%t(y))-sum(y^2)
A=array(0,dim=c(200,10,10,10))
A[][i][8][9]
A
a[,1,1,1]
A[,1,1,1]
A=array(0,dim=c(200,10,10,10))
for (i in 1:10)
{
A[,i,8,9]=rnorm(200)
}
for (i in 1:10)
{
A[,i,8,9]=rnorm(200)
}
A=array(0,dim=c(200,100,10,10))
for (i in 1:100)
{
A[,i,8,9]=rnorm(200)
}
A=array(0,dim=c(200,100,10,10))
running_time=rep(0,100)
for (i in 1:100)
{
start_time <- Sys.time()
A[,i,8,9]=rnorm(200)
end_time <- Sys.time()
running_time[i]=start_time-end_time
}
running_time
perms_pairs <- t(allPerm(initMC(c(-1, -1, -1, 1, 1, 1))))
n_perms_pairs <- ncol(perms_pairs)
library(multicool)
devtools::install_github("stan-dev/rstanarm", build_vignettes = FALSE)
devtools::install_github("stan-dev/rstanarm", build_vignettes = FALSE)
install.packages("rstanarm")
install.packages("rstanarm")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
devtools::install_github("stan-dev/rstanarm", build_vignettes = FALSE)
remove.packages("glue")
installed.packages("glue")
devtools::install_github("stan-dev/rstanarm", build_vignettes = FALSE)
remove.packages("glue")
devtools::install_github("stan-dev/rstanarm", build_vignettes = FALSE)
devtools::install_github("stan-dev/rstanarm", build_vignettes = FALSE)
xtable(results,digits=3)
setwd("C:/Users/Shuxi ZENG/Dropbox/Fourth Year/OW_Survival/codebase/OW_Survival_CodeBase")
source("data_preprocessing.R")
source("cox_model.R")
source("PSW_pseudo.R")
source("Mao_Method_func.R")
alpha.arg = c(-1,1,0)
res.IPWC = PSW.pseudo(
Y,
Z,
DELTA,
X,
var.method = 2,
weight.type = "IPW",
estimand.type = "ASCE",
ps.threshold = NA,
alpha = alpha.arg
)
### Add intercept if not for the design matrix
if (!all(X[, 1] == 1)) {
X = cbind(1, X)
}
### Summary statistics
N = length(Y)
### Estimate ps
# fit <- glm(Z ~ X, family = binomial(link = "logit"))
# e.h <- as.numeric(fit$fitted.values)
gps.fit = multinom(Z ~ -1 + X,
maxit = 500,
Hess = TRUE,
trace = FALSE)
Thetah = t(coef(gps.fit))   # matrix coefficient
thetah = c(Thetah)          # vec operator - long vector
IthetaInv = N * vcov(gps.fit) # Information Matrix
e = gps.fit$fitted.values   # Predicted PS
if (length(unique(Z)) == 2) {
e = cbind(1 - e, e)
}
head(e)
weight.type = "OW"
eInv = 1 / e   # Inverse of PS
evaluate.time = (max(Y) + max(Y[Y != max(Y)])) / 2
pseudo.obs = pseudomean(Y, event = DELTA)
pseudo.obs = as.numeric(pseudosurv(Y, event = DELTA, tmax = evaluate.time)$pseudo)
tmax = min(max(Y[Z == 0]), max(Y[Z == 2]))
X.aug = cbind(X, as.numeric(Z == 1))
colnames(X.aug) = c("X0", "X1", "X2", "X3", "X4", "Z01")
Z.aug = as.numeric(Z == 2)
as.numeric(Z == 1)
cbind(X, as.numeric(Z == 1))
tmax = min(max(Y[Z == 0]), max(Y[Z == 2]))
X.aug = cbind(X, as.numeric(Z == 1))
colnames(X.aug)
tmax = min(max(Y[Z == 0]), max(Y[Z == 2]))
X.aug = cbind(X, as.numeric(Z == 1))
colnames(X.aug)[ncol(X.aug)] = "Z01"
Z.aug = as.numeric(Z == 2)
res.mao.IPW = estimand_analysis(
X = X.aug[, -1],
Z = Z.aug,
Y = Y,
delta = DELTA,
weight.type = "IPW",
t.trunc = truncate,
tmax = tmax
)
colnames(X.aug)
paste("X",1:length(Z),sep=".")
paste("X",0:(ncol(Z)-1),sep=".")
paste("X",0:(ncol(X)-1),sep=".")
colnames(X.aug) = c(paste("X",0:(ncol(X)-1),sep="."),"Z.01")
Z.aug = as.numeric(Z == 2)
res.mao.IPW = estimand_analysis(
X = X.aug[, -1],
Z = Z.aug,
Y = Y,
delta = DELTA,
weight.type = "IPW",
t.trunc = truncate,
tmax = tmax
)
res.cox.q = cox.q.model.fit(
Y,
DELTA,
X,
Z,
alpha = alpha.arg,
truncate =  truncate,
boot.time = 250
)
